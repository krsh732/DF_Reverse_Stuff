typedef struct gentity_s gentity_t;
struct gentity_s {
    entityState_t s;
    entityShared_t r;
    gclient_t *client;
    qboolean inuse;
    char *classname;
    int spawnflags;
    qboolean neverFree;
    int flags;
    char *model;
    char *model2;
    int freetime;
    int eventTime;
    qboolean freeAfterEvent;
    qboolean unlinkAfterEvent;
    qboolean physicsObject;
    float physicsBounce;
    int clipmask;
    moverState_t moverState;
    int soundPos1;
    int sound1to2;
    int sound2to1;
    int soundPos2;
    int soundLoop;
    gentity_t *parent;
    gentity_t *nextTrain;
    gentity_t *prevTrain;
    vec3_t pos1;
    vec3_t pos2;
    char *message;
    int timestamp;
    float angle;
    char *target;
    char *targetname;
    char *team;
    char *targetShaderName;
    char *targetShaderNewName;
    gentity_t *target_ent;
    float speed;
    vec3_t movedir;
    int nextthink;
    void (*think)(gentity_t *);
    void (*reached)(gentity_t *);
    void (*blocked)(gentity_t *, gentity_t *);
    void (*touch)(gentity_t *, gentity_t *, trace_t *);
    void (*use)(gentity_t *, gentity_t *, gentity_t *);
    void (*pain)(gentity_t *, gentity_t *, int);
    void (*die)(gentity_t *, gentity_t *, gentity_t *, int, int);
    int pain_debounce_time;
    int fly_sound_debounce_time;
    int last_move_time;
    int health;
    qboolean takedamage;
    int damage;
    int splashDamage;
    int splashRadius;
    int methodOfDeath;
    int splashMethodOfDeath;
    int count;
    gentity_t *chain;
    gentity_t *enemy;
    gentity_t *activator;
    gentity_t *teamchain;
    gentity_t *teammaster;
    int watertype;
    int waterlevel;
    int noise_index;
    float wait;
    float random;
    gitem_t *item;
    int unknown; // TODO: reverse this?
    int waittable[MAX_CLIENTS];
};